{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","UserSchema","name","String","nome","sobrenome","celular","telefone","email","type","lowercase","required","isAtivo","default","role","password","provider","salt","activeToken","endereco","rua","cep","bairro","cidade","estado","complemento","numero","timestamps","virtual","get","_id","path","validate","length","value","respond","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","disg","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n/*eslint no-invalid-this:0*/\nimport crypto from 'crypto';\nmongoose.Promise = require('bluebird');\nimport mongoose, {Schema} from 'mongoose';\n\nvar UserSchema = new Schema({\n  name: String,\n  nome: String,\n  sobrenome: String,\n  celular: String,\n  telefone: String,\n  email: {\n    type: String,\n    lowercase: true,\n    required: true\n  },\n  isAtivo: {\n    type: String,\n    required: true,\n    default: false\n  },\n  role: {\n    type: String,\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  provider: String,\n  salt: String,\n  activeToken: String,\n  endereco: {\n    rua: String,\n    cep: String,\n    bairro: String,\n    cidade: String,\n    estado: String,\n    complemento: String,\n    numero: String\n  }\n}, {\n  timestamps: true\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema.virtual('profile').get(function() {\n  return {\n    name: this.nome + this.sobrenome,\n    role: this.role\n  };\n});\n\n// Non-sensitive info we'll be putting in the token\nUserSchema.virtual('token').get(function() {\n  return {\n    _id: this._id,\n    role: this.role\n  };\n});\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema.path('email').validate(function(email) {\n  return email.length;\n}, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema.path('password').validate(function(password) {\n  return password.length;\n}, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema.path('email').validate(function(value, respond) {\n  return this.constructor.findOne({\n    email: value\n  }).exec()\n    .then(user => {\n      if(user) {\n        if(this.id === user.id) {\n          return respond(true);\n        }\n        return respond(false);\n      }\n      return respond(true);\n    })\n    .catch(function(err) {\n      throw err;\n    });\n}, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema.pre('save', function(next) {\n  // Handle new/update passwords\n  if(!this.isModified('password')) {\n    return next();\n  }\n\n  if(!validatePresenceOf(this.password)) {\n    return next(new Error('Invalid password'));\n  }\n\n  // Make salt with a callback\n  this.makeSalt((saltErr, salt) => {\n    if(saltErr) {\n      return next(saltErr);\n    }\n    this.salt = salt;\n    this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n      if(encryptErr) {\n        return next(encryptErr);\n      }\n      this.password = hashedPassword;\n      return next();\n    });\n  });\n});\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate(password, callback) {\n    if(!callback) {\n      return this.password === this.encryptPassword(password);\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if(err) {\n        return callback(err);\n      }\n\n      if(this.password === pwdGen) {\n        return callback(null, true);\n      } else {\n        return callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} [byteSize] - Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(byteSize, callback) {\n    var defaultByteSize = 16;\n\n    if(typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      byteSize = defaultByteSize;\n    } else if(typeof arguments[1] === 'function') {\n      callback = arguments[1];\n    } else {\n      throw new Error('Missing Callback');\n    }\n\n    if(!byteSize) {\n      byteSize = defaultByteSize;\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, salt.toString('base64'));\n      }\n    });\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  encryptPassword(password, callback) {\n    if(!password || !this.salt) {\n      if(!callback) {\n        return null;\n      } else {\n        return callback('Missing password or salt');\n      }\n    }\n\n    var defaultIterations = 10000;\n    var defaultKeyLength = 64;\n    var salt = new Buffer(this.salt, 'base64');\n    var disg = 'sha1';\n\n    if(!callback) {\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength, disg)\n        .toString('base64');\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, disg, (err, key) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, key.toString('base64'));\n      }\n    });\n  }\n};\n\nexport default mongoose.model('User', UserSchema);\n"]}