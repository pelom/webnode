{"version":3,"sources":["mailer/templates/index.js"],"names":["fs","Templation","options","_getHtml","data","templateName","templatePath","templates","templateContent","readFileSync","template","templateOptions","defaultOptions","attachments","defaultTemplate","resolve","__dirname","interpolate","generateTextFromHTML","assign","callback","html","messageData","_getAttachments","emailData","from","subject","to","name","email","transportOptions","_getTransport","sendMail","createTransport","_attachments","forEach","attachment","indexOf","cid","push"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAEA;;IAAYA,E;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBC,U;AACnB,sBAAYC,OAAZ,EAAqB;AAAA;;AAAA,SA2CrBC,QA3CqB,GA2CV,UAASC,IAAT,EAAeC,YAAf,EAA6B;AACtC;AACA;AACA,UAAIC,eAAe,KAAKJ,OAAL,CAAaK,SAAb,CAAuBF,YAAvB,KAAwCA,YAA3D;AACA,UAAIG,kBAAkBR,GAAGS,YAAH,CAAgBH,YAAhB,EAA8B,MAA9B,CAAtB;;AAEA;AACA,aAAO,iBAAEI,QAAF,CAAWF,eAAX,EAA4B,KAAKN,OAAL,CAAaS,eAAzC,EAA0DP,IAA1D,CAAP;AACD,KAnDoB;;AACnB,QAAIQ,iBAAiB;AACnBC,mBAAa,EADM;AAEnBN,iBAAW;AACTO,yBAAiB,eAAKC,OAAL,CAAaC,SAAb,EAAwB,wBAAxB;AADR,OAFQ;AAKnBF,uBAAiB,eAAKC,OAAL,CAAaC,SAAb,EAAwB,wBAAxB,CALE;AAMnBL,uBAAiB;AACfM,qBAAa;AADE,OANE;AASnBC,4BAAsB;AATH,KAArB;;AAYA,SAAKhB,OAAL,GAAe,iBAAEiB,MAAF,CAAS,EAAT,EAAaP,cAAb,EAA6BV,OAA7B,CAAf;AACD;;;;yBAEIE,I,EAAMgB,Q,EAAU;AACnB;AACA,UAAIV,WAAWN,KAAKM,QAAL,IAAiB,KAAKR,OAAL,CAAaY,eAA7C;;AAEA,UAAIO,OAAO,KAAKlB,QAAL,CAAcC,KAAKkB,WAAnB,EAAgCZ,QAAhC,CAAX;AACA,UAAIG,cAAc,KAAKU,eAAL,CAAqBF,IAArB,CAAlB;;AAEA,UAAIG,YAAY;AACdC,cAAMrB,KAAKqB,IAAL,IAAa,KAAKvB,OAAL,CAAauB,IADlB;AAEdC,iBAAStB,KAAKsB,OAFA;AAGdL,cAAMA,IAHQ;AAIdH,8BAAsB,KAAKhB,OAAL,CAAagB,oBAJrB;AAKdL,qBAAaA;AALC,OAAhB;;AAQA,UAAG,sBAAOT,KAAKuB,EAAZ,MAAmB,QAAtB,EAAgC;AAC9BH,kBAAUG,EAAV,GAAevB,KAAKuB,EAAL,CAAQC,IAAR,GAAe,IAAf,GAAsBxB,KAAKuB,EAAL,CAAQE,KAA9B,GAAsC,GAArD;AACD,OAFD,MAEO;AACLL,kBAAUG,EAAV,GAAevB,KAAKuB,EAApB;AACD;AACD,UAAIG,mBAAmB1B,KAAK0B,gBAAL,IAAyB,KAAK5B,OAAL,CAAa4B,gBAA7D;;AAEA,aAAO,KAAKC,aAAL,CAAmBD,gBAAnB,EAAqCE,QAArC,CAA8CR,SAA9C,EAAyDJ,QAAzD,CAAP;AACD;;;kCACalB,O,EAAS;AACrB,aAAO,qBAAQ+B,eAAR,CAAwB,uCAAc/B,OAAd,CAAxB,CAAP;AACD;;;oCAUemB,I,EAAM;AACpB,UAAIR,cAAc,EAAlB;AACA,WAAKqB,YAAL,GAAoB,KAAKhC,OAAL,CAAaW,WAAjC;AACA;AACA,uBAAEsB,OAAF,CAAU,KAAKD,YAAf,EAA6B,UAASE,UAAT,EAAqB;AAClD,YAAGf,KAAKgB,OAAL,CAAa,SAASD,WAAWE,GAAjC,IAAwC,CAAC,CAA5C,EACEzB,YAAY0B,IAAZ,CAAiBH,UAAjB;AACD,OAHD;AAIA,aAAOvB,WAAP;AACD;;;;;kBA9DkBZ,U","file":"index.js","sourcesContent":["'use strict';\n\nimport * as fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport smtpTransport from 'nodemailer-smtp-transport';\nimport emailer from 'nodemailer';\n\nexport default class Templation {\n  constructor(options) {\n    var defaultOptions = {\n      attachments: [],\n      templates: {\n        defaultTemplate: path.resolve(__dirname, 'templates/default.html')\n      },\n      defaultTemplate: path.resolve(__dirname, 'templates/default.html'),\n      templateOptions: {\n        interpolate: /{{([\\s\\S]+?)}}/g\n      },\n      generateTextFromHTML: true\n    };\n\n    this.options = _.assign({}, defaultOptions, options);\n  }\n\n  send(data, callback) {\n    //Get required data to generate HTML\n    var template = data.template || this.options.defaultTemplate;\n\n    var html = this._getHtml(data.messageData, template);\n    var attachments = this._getAttachments(html);\n\n    var emailData = {\n      from: data.from || this.options.from,\n      subject: data.subject,\n      html: html,\n      generateTextFromHTML: this.options.generateTextFromHTML,\n      attachments: attachments\n    };\n\n    if(typeof data.to === 'object') {\n      emailData.to = data.to.name + ' <' + data.to.email + '>';\n    } else {\n      emailData.to = data.to;\n    }\n    var transportOptions = data.transportOptions || this.options.transportOptions;\n\n    return this._getTransport(transportOptions).sendMail(emailData, callback);\n  }\n  _getTransport(options) {\n    return emailer.createTransport(smtpTransport(options));\n  }\n  _getHtml = function(data, templateName) {\n    //Resolve our template path using the path of a template given in options,\n    //or if the path is the template name itself\n    var templatePath = this.options.templates[templateName] || templateName;\n    var templateContent = fs.readFileSync(templatePath, 'utf8');\n\n    //Return the rendered version of our template via lodash template method.\n    return _.template(templateContent, this.options.templateOptions)(data);\n  }\n  _getAttachments(html) {\n    var attachments = [];\n    this._attachments = this.options.attachments;\n    //Go through each attachment in our options and find out which ones our template is using\n    _.forEach(this._attachments, function(attachment) {\n    if(html.indexOf('cid:' + attachment.cid) > -1)\n      attachments.push(attachment);\n    });\n    return attachments;\n  }\n}\n"]}